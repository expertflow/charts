{{- /* charts/<COMPONENT>/templates/apisix-route.yaml */}}
{{- /* v24: Uses 'common.names.fullname-svc' for default backendServiceName. */}}
{{- /* - Robust 'enabled' flag logic. */}}
{{- /* - Supports single string global.ingressRouter, per-route 'hosts' override (templateable), 'exprs' in match, shorter rule names, redirect fix, customPlugins. */}}

{{- /* --- Loop through each route defined for this component --- */}}
{{- range $index, $routeData := .Values.apisixRoutes }}
{{- /*
      Robust condition for 'enabled' flag:
      1. Default to rendering the route ($renderRoute = true).
      2. If 'enabled' key exists in $routeData:
      3.   And if its type is boolean:
      4.     And if its value is 'false':
      5.       Then set $renderRoute = false (do not render).
      This ensures that an explicit 'enabled: false' (boolean) in values.yaml reliably skips rendering.
      If 'enabled' is true or missing, the route is rendered.
*/}}
{{-   $renderRoute := true -}}
{{-   if hasKey $routeData "enabled" -}}
{{- if eq ($routeData.enabled | typeOf) "bool" -}}
{{-   if eq $routeData.enabled false -}}
{{-     $renderRoute = false -}}
{{-   end -}}
{{- else }}
      {{- /* Optional: Warn or error if 'enabled' is present but not a boolean */}}
      {{- /* For now, non-boolean 'enabled' will lead to rendering, same as if it was true or missing */}}
{{- end -}}
{{-   end -}}
{{-   if $renderRoute }}

{{- /* --- Setup: Global Values & Current Route Variables --- */}}
{{- $global := $.Values.global | default dict }}
{{- $globalApisix := $global.apisix | default dict }}
{{- $globalAuth := $globalApisix.keycloak | default dict }}
{{- $globalCors := $globalApisix.plugins.cors | default dict }}
{{- $globalRewrite := $globalApisix.plugins.rewrite | default dict }}
{{- $routePlugins := $routeData.plugins | default dict }}
{{- $authEnabled := $routePlugins.enableAuth | default false }}
{{- $rewriteEnabled := $routePlugins.enableRewrite | default $globalRewrite.enabled | default false }}
{{- $corsEnabled := $routePlugins.enableCors | default $globalCors.enabled | default false }}
{{- $redirectEnabled := $routePlugins.enableTrailingSlashRedirect | default false }}
{{- $websocketEnabled := $routeData.enableWebsocket | default false }}

{{- /* --- Backend Dictionary (used in multiple places) --- */}}
{{- /* v24 Change: Default backendServiceName now uses 'common.names.fullname-svc' helper */}}
{{- $backendServiceName := $routeData.backendServiceName | default (include "common.names.fullname-svc" $) }}
{{- $backendServicePort := $routeData.backendServicePort | required (printf "Missing required field 'backendServicePort' for route %s-%s" (include "common.names.fullname" $) $routeData.nameSuffix) }}
{{- $backendDict := dict "serviceName" $backendServiceName "servicePort" ($backendServicePort | int) }}
{{- if $routeData.backendNamespace }}{{ $_ := set $backendDict "namespace" $routeData.backendNamespace }}{{ end }}
{{- if $routeData.backendScheme }}{{ $_ := set $backendDict "scheme" $routeData.backendScheme }}{{ end }}

{{- /* --- Main Plugins List Construction (Standard + Custom, EXCLUDES REDIRECT) --- */}}
{{- $mainPluginsList := list }}
{{- /* Standard Plugins based on flags */}}
{{- if $authEnabled }}
{{-   $oidcConfig := dict
              "discovery" ($globalAuth.discoveryUrl | required "Missing global.apisix.keycloak.discoveryUrl")
              "realm" ($globalAuth.realm | required "Missing global.apisix.keycloak.realm")
              "client_id" ($globalAuth.clientId | required "Missing global.apisix.keycloak.clientId")
              "client_secret" ($globalAuth.clientSecret | required "Missing global.apisix.keycloak.clientSecret")
              "bearer_only" ($globalAuth.bearerOnly | default true)
              "token_signing_alg_values_expected" ($globalAuth.tokenSigningAlg | default "RS256")
              "set_access_token_header" ($globalAuth.setAccessTokenHeader | default false)
              "set_userinfo_header" ($globalAuth.setUserInfoHeader | default false)
              "audience" (default $globalAuth.defaultAudience $routePlugins.authAudience | default list)
              "required_scopes" (default $globalAuth.defaultScopes $routePlugins.authScopes | default list)
    -}}
{{-   $mainPluginsList = append $mainPluginsList (dict "name" "openid-connect" "enable" true "config" $oidcConfig) }}
{{- end }}
{{- if $rewriteEnabled }}
{{-   $rewriteConfig := dict }}
{{-   if $routePlugins.rewriteRegexUriFrom }}
{{-     $_ := set $rewriteConfig "regex_uri" (list ($routePlugins.rewriteRegexUriFrom | required (printf "rewriteRegexUriFrom missing for custom rewrite on route %s-%s" (include "common.names.fullname" $) $routeData.nameSuffix)) ($routePlugins.rewriteRegexUriTo | required (printf "rewriteRegexUriTo missing for custom rewrite on route %s-%s" (include "common.names.fullname" $) $routeData.nameSuffix))) }}
{{-   else if default $globalRewrite.stripPrefix $routePlugins.rewriteStripPrefix }}
{{-     $firstPathForRewrite := "" }}
{{-     if $routeData.paths }}{{ $firstPathForRewrite = (first $routeData.paths) }}{{ else if $routeData.path }}{{ $firstPathForRewrite = $routeData.path }}{{ else }}{{ fail (printf "Cannot determine path for default rewrite on route %s-%s" (include "common.names.fullname" $) $routeData.nameSuffix) }}{{ end }}
{{-     $basePathForRewrite := $firstPathForRewrite | replace "/*" "" | trimSuffix "/" }}
{{-     if eq $basePathForRewrite "" }}
{{-       $_ := set $rewriteConfig "regex_uri" (list "^/(.*)" "/$1") }}
{{-     else }}
{{-       $_ := set $rewriteConfig "regex_uri" (list (printf "^%s/?(.*)" $basePathForRewrite) "/$1") }}
{{-     end }}
{{-   end }}
{{-   if $rewriteConfig }}
{{-     $mainPluginsList = append $mainPluginsList (dict "name" "proxy-rewrite" "enable" true "config" $rewriteConfig) }}
{{-   end }}
{{- end }}
{{- if $corsEnabled }}
{{-   $corsConfig := dict
              "allow_origins" (default $globalCors.allowOrigins $routePlugins.corsAllowOrigins | default "*")
              "allow_methods" (default $globalCors.allowMethods $routePlugins.corsAllowMethods | default "GET, POST, PUT, DELETE, PATCH, OPTIONS")
              "allow_credentials" (default $globalCors.allowCredentials $routePlugins.corsAllowCredentials | default true)
    -}}
{{-   $mainPluginsList = append $mainPluginsList (dict "name" "cors" "enable" true "config" $corsConfig) }}
{{- end }}

    {{- /* --- Append Custom Plugins specified in values.yaml --- */}}
    {{- if $routePlugins.customPlugins }}
    {{-   range $customPlugin := $routePlugins.customPlugins }}
    {{- $mainPluginsList = append $mainPluginsList $customPlugin }}
    {{-   end }}
    {{- end }}

    {{- if $index | ne 0 }}
---
    {{- end }}
# Main ApisixRoute: {{ include "common.names.fullname" $ }}-route-{{ $routeData.nameSuffix }}
apiVersion: apisix.apache.org/v2
kind: ApisixRoute
metadata:
  name: {{ include "common.names.fullname" $ }}-route-{{ $routeData.nameSuffix }}
  namespace: {{ $.Release.Namespace }}
  labels:
    {{- include "common.labels.standard" $ | nindent 4 }}
spec:
  http:
  - name: r-{{ include "common.names.fullname" $ }}-{{ $routeData.nameSuffix | trunc 60 }}
    priority: {{ $routeData.priority | default 0 }}
    match:
      hosts:
      {{- if $routeData.hosts }}
        {{- /* Use per-route hosts if defined, and render them using tpl (or common.tplvalues.render) */}}
        {{- range $hostStr := $routeData.hosts }}
        - {{ include "common.tplvalues.render" (dict "value" $hostStr "context" $) | quote }}
        {{- end }}
      {{- else if $global.ingressRouter }}
        {{- /* Fallback to global.ingressRouter (expects string, tpl it) */}}
        {{- if kindIs "string" $global.ingressRouter }}
        - {{ include "common.tplvalues.render" (dict "value" $global.ingressRouter "context" $) | quote }}
        {{- else }}
          {{- required (printf "global.ingressRouter for component %s, route %s must be a string if routeData.hosts is not defined" (include "common.names.fullname" $) $routeData.nameSuffix) "" }}
        {{- end }}
      {{- else }}
        {{- required (printf "Either routeData.hosts (list of templateable strings) or global.ingressRouter (templateable string) must be set for component %s, route %s" (include "common.names.fullname" $) $routeData.nameSuffix) "" }}
      {{- end }}
      {{- if $routeData.paths }}
      paths:
        {{- $processedPaths := list }}
        {{- range $p := $routeData.paths }}
          {{- $processedPaths = append $processedPaths ( $p | trimSuffix "*" | printf "%s*" ) }}
        {{- end }}
        {{- $processedPaths | toYaml | nindent 8 }}
      {{- else if $routeData.path }}
      paths:
      - {{ $routeData.path | trimSuffix "*" | printf "%s*" | quote }}
      {{- else }}
        {{- required (printf "Missing required field 'paths' (list) or 'path' (string) for main route %s-%s" (include "common.names.fullname" $) $routeData.nameSuffix) "" }}
      {{- end }}
      {{- with $routeData.methods }}
      methods:
        {{- . | toYaml | nindent 8 }}
      {{- end }}
      {{- if $routeData.exprs }}
      exprs:
        {{- $routeData.exprs | toYaml | nindent 8 }}
      {{- end }}
    backends:
      - serviceName: {{ $backendDict.serviceName }}
        servicePort: {{ $backendDict.servicePort }}
        {{- if $routeData.backendNamespace }}
        namespace: {{ $routeData.backendNamespace }}
        {{- end }}
        {{- if $backendDict.scheme }}
        scheme: {{ $backendDict.scheme }}
        {{- end }}
    {{- if $websocketEnabled }}
    websocket: true
    {{- with $routeData.websocketTimeout }}
    timeout:
      connect: {{ .connect | quote }}
      send: {{ .send | quote }}
      read: {{ .read | quote }}
    {{- else }}
    timeout: { connect: "5s", send: "3600s", read: "3600s" }
    {{- end }}
    {{- end }}
    {{- if gt (len $mainPluginsList) 0 }}
    plugins:
      {{- $mainPluginsList | toYaml | nindent 8 }}
    {{- end }}

{{- /* --- Generate Separate Redirect Route if Enabled --- */}}
{{- if $redirectEnabled }}
{{- $firstPathForRedirect := "" }}
{{- if $routeData.paths }}{{ $firstPathForRedirect = (first $routeData.paths) }}{{ else if $routeData.path }}{{ $firstPathForRedirect = $routeData.path }}{{ else }}{{ fail (printf "Cannot determine path for redirect on route %s-%s" (include "common.names.fullname" $) $routeData.nameSuffix) }}{{ end }}
{{- $basePathForRedirect := $firstPathForRedirect | replace "/*" "" | trimSuffix "/" }}
{{- if eq $basePathForRedirect "" }}{{ fail (printf "Trailing slash redirect cannot be applied to root path for route %s-%s" (include "common.names.fullname" $) $routeData.nameSuffix) }}{{ end }}
---
# Redirect ApisixRoute: {{ include "common.names.fullname" $ }}-redirect-route-{{ $routeData.nameSuffix }}
apiVersion: apisix.apache.org/v2
kind: ApisixRoute
metadata:
  name: {{ include "common.names.fullname" $ }}-redirect-route-{{ $routeData.nameSuffix }}
  namespace: {{ $.Release.Namespace }}
  labels:
    {{- include "common.labels.standard" $ | nindent 4 }}
spec:
  http:
  - name: r-{{ include "common.names.fullname" $ }}-{{ $routeData.nameSuffix | trunc 54 }}-redir
    priority: {{ $routeData.priority | default 0 | add1 }}
    match:
      hosts:
      {{- if $routeData.hosts }}
        {{- range $hostStr := $routeData.hosts }}
        - {{ include "common.tplvalues.render" (dict "value" $hostStr "context" $) | quote }}
        {{- end }}
      {{- else if $global.ingressRouter }}
        {{- if kindIs "string" $global.ingressRouter }}
        - {{ include "common.tplvalues.render" (dict "value" $global.ingressRouter "context" $) | quote }}
        {{- else }}
          {{- required (printf "global.ingressRouter for component %s, redirect route %s must be a string if routeData.hosts is not defined" (include "common.names.fullname" $) $routeData.nameSuffix) "" }}
        {{- end }}
      {{- else }}
        {{- required (printf "Either routeData.hosts or global.ingressRouter must be set for component %s, redirect route %s" (include "common.names.fullname" $) $routeData.nameSuffix) "" }}
      {{- end }}
      paths:
      - {{ $basePathForRedirect | quote }}
      methods: ["GET"]
      {{- if $routeData.exprs }}
      exprs:
        {{- $routeData.exprs | toYaml | nindent 8 }}
      {{- end }}
    backends:
      - serviceName: {{ $backendDict.serviceName }}
        servicePort: {{ $backendDict.servicePort }}
        {{- if $routeData.backendNamespace }}
        namespace: {{ $routeData.backendNamespace }}
        {{- end }}
        {{- if $backendDict.scheme }}
        scheme: {{ $backendDict.scheme }}
        {{- end }}
    plugins:
      - name: redirect
        enable: true
        config:
          uri: "$uri/"
          ret_code: 301
{{- end }} {{- /* End if $redirectEnabled */}}

{{- end }} {{- /* End if $renderRoute */}}
{{- end }} {{- /* End range .Values.apisixRoutes */}}

