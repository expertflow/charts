{{- /* charts/<COMPONENT>/templates/apisix-route.yaml */}}
{{- /* v18: Added support for customPlugins list in values.yaml. */}}
{{- /* Based on v17c logic (fixed backends, fixed redirect plugin config). */}}
{{- /* Handles trailing slash redirect via a separate, higher-priority route. */}}
{{- /* Handles backendScheme. */}}

{{- /* --- Loop through each route defined for this component --- */}}
{{- range $index, $routeData := .Values.apisixRoutes }}
{{-   if $routeData.enabled | default true }}

{{- /* --- Setup: Global Values & Current Route Variables --- */}}
{{- $global := $.Values.global | default dict }}
{{- $globalApisix := $global.apisix | default dict }}
{{- $globalAuth := $globalApisix.keycloak | default dict }}
{{- $globalCors := $globalApisix.plugins.cors | default dict }}
{{- $globalRewrite := $globalApisix.plugins.rewrite | default dict }}
{{- $routePlugins := $routeData.plugins | default dict }}
{{- $authEnabled := $routePlugins.enableAuth | default false }}
{{- $rewriteEnabled := $routePlugins.enableRewrite | default $globalRewrite.enabled | default false }}
{{- $corsEnabled := $routePlugins.enableCors | default $globalCors.enabled | default false }}
{{- $redirectEnabled := $routePlugins.enableTrailingSlashRedirect | default false }}
{{- $websocketEnabled := $routeData.enableWebsocket | default false }}

{{- /* --- Backend Dictionary (used in multiple places) --- */}}
{{- $backendServiceName := $routeData.backendServiceName | default (include "common.names.fullname-svc" $) }}
{{- $backendServicePort := $routeData.backendServicePort | required (printf "Missing required field 'backendServicePort' for route %s-%s" (include "common.names.fullname" $) $routeData.nameSuffix) }}
{{- $backendDict := dict "serviceName" $backendServiceName "servicePort" ($backendServicePort | int) }}
{{- if $routeData.backendNamespace }}{{ $_ := set $backendDict "namespace" $routeData.backendNamespace }}{{ end }}
{{- if $routeData.backendScheme }}{{ $_ := set $backendDict "scheme" $routeData.backendScheme }}{{ end }}

{{- /* --- Main Plugins List Construction (Standard + Custom, EXCLUDES REDIRECT) --- */}}
{{- $mainPluginsList := list }}
{{- /* Standard Plugins based on flags */}}
{{- if $authEnabled }}
{{-   $oidcConfig := dict
              "discovery" ($globalAuth.discoveryUrl | required "Missing global.apisix.keycloak.discoveryUrl")
              "realm" ($globalAuth.realm | required "Missing global.apisix.keycloak.realm")
              "client_id" ($globalAuth.clientId | required "Missing global.apisix.keycloak.clientId")
              "client_secret" ($globalAuth.clientSecret | required "Missing global.apisix.keycloak.clientSecret")
              "bearer_only" ($globalAuth.bearerOnly | default true)
              "token_signing_alg_values_expected" ($globalAuth.tokenSigningAlg | default "RS256")
              "set_access_token_header" ($globalAuth.setAccessTokenHeader | default false)
              "set_userinfo_header" ($globalAuth.setUserInfoHeader | default false)
              "audience" (default $globalAuth.defaultAudience $routePlugins.authAudience | default list)
              "required_scopes" (default $globalAuth.defaultScopes $routePlugins.authScopes | default list)
    -}}
{{-   $mainPluginsList = append $mainPluginsList (dict "name" "openid-connect" "enable" true "config" $oidcConfig) }}
{{- end }}
{{- if $rewriteEnabled }}
{{-   $rewriteConfig := dict }}
{{-   if $routePlugins.rewriteRegexUriFrom }}
{{-     $_ := set $rewriteConfig "regex_uri" (list ($routePlugins.rewriteRegexUriFrom | required (printf "rewriteRegexUriFrom missing for custom rewrite on route %s-%s" (include "common.names.fullname" $) $routeData.nameSuffix)) ($routePlugins.rewriteRegexUriTo | required (printf "rewriteRegexUriTo missing for custom rewrite on route %s-%s" (include "common.names.fullname" $) $routeData.nameSuffix))) }}
{{-   else if default $globalRewrite.stripPrefix $routePlugins.rewriteStripPrefix }}
{{-     $firstPathForRewrite := "" }}
{{-     if $routeData.paths }}{{ $firstPathForRewrite = (first $routeData.paths) }}{{ else if $routeData.path }}{{ $firstPathForRewrite = $routeData.path }}{{ else }}{{ fail (printf "Cannot determine path for default rewrite on route %s-%s" (include "common.names.fullname" $) $routeData.nameSuffix) }}{{ end }}
{{-     $basePathForRewrite := $firstPathForRewrite | replace "/*" "" | trimSuffix "/" }}
{{-     if eq $basePathForRewrite "" }}
{{-       $_ := set $rewriteConfig "regex_uri" (list "^/(.*)" "/$1") }}
{{-     else }}
{{-       $_ := set $rewriteConfig "regex_uri" (list (printf "^%s/?(.*)" $basePathForRewrite) "/$1") }}
{{-     end }}
{{-   end }}
{{-   if $rewriteConfig }}
{{-     $mainPluginsList = append $mainPluginsList (dict "name" "proxy-rewrite" "enable" true "config" $rewriteConfig) }}
{{-   end }}
{{- end }}
{{- if $corsEnabled }}
{{-   $corsConfig := dict
              "allow_origins" (default $globalCors.allowOrigins $routePlugins.corsAllowOrigins)
              "allow_methods" (default $globalCors.allowMethods $routePlugins.corsAllowMethods)
              "allow_credentials" (default $globalCors.allowCredentials $routePlugins.corsAllowCredentials)
    -}}
{{-   $mainPluginsList = append $mainPluginsList (dict "name" "cors" "enable" true "config" $corsConfig) }}
{{- end }}

    {{- /* --- Append Custom Plugins specified in values.yaml --- */}}
    {{- /* Expects $routePlugins.customPlugins to be a list of maps */}}
    {{- if $routePlugins.customPlugins }}
    {{-   range $customPlugin := $routePlugins.customPlugins }}
    {{- /* Append the entire custom plugin map (which should contain name, enable, config) */}}
    {{- $mainPluginsList = append $mainPluginsList $customPlugin }}
    {{-   end }}
    {{- end }}

    {{- /* --- Ensure separator for MAIN route only if it's NOT the first resource overall --- */}}
    {{- if $index | ne 0 }}
---
    {{- end }}
# Main ApisixRoute: {{ include "common.names.fullname" $ }}-route-{{ $routeData.nameSuffix }}
apiVersion: apisix.apache.org/v2
kind: ApisixRoute
metadata:
  name: {{ include "common.names.fullname" $ }}-route-{{ $routeData.nameSuffix }}
  namespace: {{ $.Release.Namespace }}
  labels:
    {{- include "common.labels.standard" $ | nindent 8 }}
spec:
  http:
  - name: rule-{{ include "common.names.fullname" $ }}-{{ $routeData.nameSuffix }}
    priority: {{ $routeData.priority | default 0 }}
    match:
      hosts:
      - {{ $global.ingressRouter | required "Missing required field 'global.ingressRouter'" | quote }}
      {{- if $routeData.paths }}
      paths:
        {{- $processedPaths := list }}
        {{- range $p := $routeData.paths }}
          {{- $processedPaths = append $processedPaths ( $p | trimSuffix "*" | printf "%s*" ) }}
        {{- end }}
        {{- $processedPaths | toYaml | nindent 10 }}
      {{- else if $routeData.path }}
      paths:
      - {{ $routeData.path | trimSuffix "*" | printf "%s*" | quote }}
      {{- else }}
        {{- required "Missing required field 'paths' (list) or 'path' (string) for main route" "" }}
      {{- end }}
      {{- with $routeData.methods }}
      methods:
        {{- . | toYaml | nindent 10 }}
      {{- end }}
    backends: # Indent 6 relative to apiVersion line
      - serviceName: {{ $backendDict.serviceName }} # Indent 8 (list item) + key at indent 10
        servicePort: {{ $backendDict.servicePort }} # key at indent 10
        {{- if $backendDict.namespace }}
        namespace: {{ $backendDict.namespace }} # key at indent 10
        {{- end }}
        {{- if $backendDict.scheme }}
        scheme: {{ $backendDict.scheme }} # key at indent 10
        {{- end }}
    {{- if $websocketEnabled }}
    websocket: true
    {{- with $routeData.websocketTimeout }}
    timeout:
      connect: {{ .connect | quote }}
      send: {{ .send | quote }}
      read: {{ .read | quote }}
    {{- else }}
    timeout: { connect: "5s", send: "3600s", read: "3600s" }
    {{- end }}
    {{- end }}
    {{- /* Render the combined list of standard + custom plugins */}}
    {{- if gt (len $mainPluginsList) 0 }}
    plugins: # Indent 8
      {{- /* Use nindent 10 because list items start at indent 10 */}}
      {{- $mainPluginsList | toYaml | nindent 10 }}
    {{- end }}

{{- /* --- Generate Separate Redirect Route if Enabled --- */}}
{{- if $redirectEnabled }}
{{- $firstPathForRedirect := "" }}
{{- if $routeData.paths }}{{ $firstPathForRedirect = (first $routeData.paths) }}{{ else if $routeData.path }}{{ $firstPathForRedirect = $routeData.path }}{{ else }}{{ fail (printf "Cannot determine path for redirect on route %s-%s" (include "common.names.fullname" $) $routeData.nameSuffix) }}{{ end }}
{{- $basePathForRedirect := $firstPathForRedirect | replace "/*" "" | trimSuffix "/" }}
{{- if eq $basePathForRedirect "" }}{{ fail (printf "Trailing slash redirect cannot be applied to root path for route %s-%s" (include "common.names.fullname" $) $routeData.nameSuffix) }}{{ end }}
{{- $redirectPluginConfig := dict "regex_uri" (list (printf "^%s$" $basePathForRedirect)) "uri" (printf "%s/" $basePathForRedirect) "ret_code" 301 }}
--- {{/* ALWAYS add separator before the redirect route if it's generated */}}
# Redirect ApisixRoute: {{ include "common.names.fullname" $ }}-redirect-route-{{ $routeData.nameSuffix }}
apiVersion: apisix.apache.org/v2
kind: ApisixRoute
metadata:
  name: {{ include "common.names.fullname" $ }}-redirect-route-{{ $routeData.nameSuffix }}
  namespace: {{ $.Release.Namespace }}
  labels:
    {{- include "common.labels.standard" $ | nindent 8 }}
spec:
  http:
  - name: rule-{{ include "common.names.fullname" $ }}-{{ $routeData.nameSuffix }}-redirect
    priority: {{ $routeData.priority | default 0 | add1 }}
    match:
      hosts:
      - {{ $global.ingressRouter | quote }}
      paths:
      - {{ $basePathForRedirect | quote }}
      methods: ["GET"]
    backends: # Indent 6
      - serviceName: {{ $backendDict.serviceName }} # Indent 8 + key at 10
        servicePort: {{ $backendDict.servicePort }} # key at 10
        {{- if $backendDict.namespace }}
        namespace: {{ $backendDict.namespace }} # key at 10
        {{- end }}
        {{- if $backendDict.scheme }}
        scheme: {{ $backendDict.scheme }} # key at 10
        {{- end }}
    plugins: # Indent 8
      - name: redirect # Indent 10
        enable: true  # Indent 12
        config:       # Indent 12
          # Define the redirect config keys directly for correct indentation
          regex_uri: # Indent 14
          {{- range $uri := $redirectPluginConfig.regex_uri }}
          - {{ $uri | quote }} # Indent 14 (List item)
          {{- end }}
          uri: {{ $redirectPluginConfig.uri | quote }} # Indent 14
          ret_code: {{ $redirectPluginConfig.ret_code }} # Indent 14
{{- end }} {{- /* End if $redirectEnabled */}}

{{- end }} {{- /* End if $routeData.enabled */}}
{{- end }} {{- /* End range .Values.apisixRoutes */}}
