# Default values for ef-cx.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
#
# ███████ ██   ██ ██████  ███████ ██████  ████████ ███████ ██       ██████  ██     ██ 
# ██       ██ ██  ██   ██ ██      ██   ██    ██    ██      ██      ██    ██ ██     ██ 
# █████     ███   ██████  █████   ██████     ██    █████   ██      ██    ██ ██  █  ██ 
# ██       ██ ██  ██      ██      ██   ██    ██    ██      ██      ██    ██ ██ ███ ██ 
# ███████ ██   ██ ██      ███████ ██   ██    ██    ██      ███████  ██████   ███ ███  
#
# Globals Section:
#
# global.ingressRouter: Provides a central location for the FQDN that will be used \
#                       across the EF CX solution
# global.registry: when deploying solution with limited access to internet, \
#                  changing this will cause all subsequent image pulls from this registry. \
#                  Used as Variable in all sub-charts
#


global:
  ingressRouter: "devops.ef.com"
  ingressCertName: "ef-ingress-tls-secret"
  ingressClassName: "nginx"
  efCxReleaseName: "ef-cx"
  commonIngressAnnotations: {}
  ##    nginx.ingress.kubernetes.io/rewrite-target: /$2
  ##    nginx.ingress.kubernetes.io/use-regex: "true"
  imageRegistry: "gitimages.expertflow.com"
  imagePullSecrets: 
   - ef-gitlab-secret
  ## The CommonEnvVars are now part of the globals. Selective adaption to components is mandatory.
  efCommonVars_IS_WRAP_UP_ENABLED: false
  efCommonVars_WRAPUP_TIME: "60"
  efCommonVars_DEFAULT_ROOM_NAME: CC
  efCommonVars_DEFAULT_ROOM_DESCRIPTION: Contact Center Room
  efCommonVars_DEFAULT_ROOM_LABEL: CC
  efCommonVars_ROOM_IS_USER_ID: false
  efCommonVars_CONVERSATION_SEARCH_WINDOW_HRS: "24"
  efCommonVars_TZ: UTC
  efCommonVars_MASK_ATTRIBUTES_PATH: /sensitive.js
  efCommonVars_LOGGING_CONFIG: /logback/logback-spring.xml
  efCommonVars_IS_ENABLED_2FA: "false"
  efCommonVars_CHANNEL_2FA: "app"
  efCommonVars_TWILIO_SID: ""
  efCommonVars_TWILIO_VERIFY_SID: ""
  efCommonVars_TWILIO_AUTH_TOKEN: ""
  efCommonVars_TOPIC_CONCURRENCY_MIN: "2"
  efCommonVars_TOPIC_CONCURRENCY_MAX: "6"
  efCommonVars_MEMORY_THRESHOLD_MBS: 1000
  apisix:
    keycloak:
      discoveryUrl: "http://keycloak.ef-external.svc/auth/realms/expertflow/.well-known/openid-configuration" # Internal URL
      realm: "expertflow"
      clientId: "cim"
      clientSecret: "ef61df80-061c-4c29-b9ac-387e6bf67052"
      bearerOnly: true
      tokenSigningAlg: "RS256"
      setAccessTokenHeader: false # Don't pass token header to backend
      setUserInfoHeader: false    # Don't pass userinfo header to backend
      defaultAudience: ["cim", "account", "realm-management"]
      defaultScopes: ["email", "profile"]
    plugins:
      cors:
        enabled: false # Default CORS disabled unless enabled per route
        allowOrigins: "*"
        allowMethods: "GET, POST, PUT, DELETE, PATCH, OPTIONS"
        allowCredentials: true
      rewrite:
        stripPrefix: true # Default rewrite action



# Change the below given paragraph when deploying an offline solution to pick the images from 
#  -- Local Repo running inside the Kubernetes Engine
#  -- Customer's own Repo requiring all images to be sorted locally 
#
# imageCredentials:
# imageCredentials.registry: provides the registry URL
# imageCredentials.username: username to use
# imageCredentials.password: Password for the user
# imageCredentials.email: an email address for the user
#
clusterDomain: cluster.local



##############################campaigns##############################
campaigns-backend:
   enabled: true
   image:       
      repository: cim/campaigns
      tag: 4.9.2
   efConnectionVars: true
   efEnvironmentVars: false
   containerPorts:
      - name: "http-cp-3000"
        containerPort: 3000
   extraEnvVars:
      - name: PORT
        value: "3000"
      - name: LOG_LEVEL
        value: debug
      - name: MONGO_CONNECTION_STRING
        value:  mongodb://mongo-mongodb.ef-external.svc.cluster.local
      - name: NODERED_URI
        value:  http://{{ .Release.Name }}-campaign-studio-svc.{{ .Release.Namespace }}.svc:1880
      - name:  NODERED_USERNAME
        value: admin
      - name: NODERED_PASS
        value: admin
      - name: UPLOAD_CSV_BATCH_SIZE
        value: "500"
      - name:  NODERED_SYNC_BATCH_SIZE
        value: "100"
      - name: CCM_URL
        value: http://{{ .Values.global.efCxReleaseName }}-ccm-svc.{{ .Release.Namespace }}.svc:8081
      - name: SCHEDULER_URL
        value: http://{{ .Release.Name }}-scheduled-activities-svc.{{ .Release.Namespace }}.svc:8894
   service:
      enabled: true
      port: 3000
      portName: "http-cp-3000"
      targetPort: "http-cp-3000"
   ingress: { enabled: false } # Using APISIX
   apisixRoutes:
     - nameSuffix: "main"
       enabled: true
       priority: 0
       paths: ["/campaigns/*"]     # From ingress path
       backendServicePort: 3000    # From ingress backend
       # backendServiceName: ""    # Optional: Defaults to chart service name
       # backendNamespace: ""    # Optional: Defaults to release namespace
       # backendScheme: "http"     # Optional: Defaults to http
       # methods: ["GET", "POST"]  # Optional: Defaults to all
       # enableWebsocket: false    # Optional: Defaults to false
       plugins:
         enableAuth: false          # Assumed: Requires auth
         enableRewrite: true       # From ingress rewrite-target (implies default prefix strip)
         # rewriteStripPrefix: true # Template default when enableRewrite=true and no custom regex
         enableCors: false         # No CORS annotations on specific ingress
         enableTrailingSlashRedirect: false # No redirect needed
   extraVolumes:
      - name: mongo-mongodb-ca
        secret:
          secretName: mongo-mongodb-ca
   extraVolumeMounts:
      - name: mongo-mongodb-ca
        mountPath: /mongo



##############################conversation-studio##############################
campaign-studio:
   enabled: true
   image:       
      repository: cim/conversation-studio
      tag: 4.9.2
   efConnectionVars: false
   efEnvironmentVars: false
   containerPorts:
      - name: "http-sb-1880"
        containerPort: 1880
   extraEnvVars:
      - name: TZ
        value: Asia/Karachi
      - name: FQDN
        value: '{{ .Values.global.ingressRouter }}' 
      - name: CAMPAIGNS_BACKEND
        value: http://{{ .Release.Name }}-campaigns-backend-svc.{{ .Release.Namespace }}.svc:3000
      - name: SCHEDULER_URL
        value:  http://{{ .Release.Name }}-scheduled-activities-svc.{{ .Release.Namespace }}.svc:8894
      - name: URIForWebhook
        value: http://{{ .Release.Name }}-campaign-studio-svc.{{ .Release.Namespace }}.svc:1880
      - name: GATEWAY_ID
        value: 52952a5a-e7b0-40bc-aae2-f0819446c968
      - name: IVR_EXTENSION
        value: "*9664"
      - name: UCCE_FQDN
        value: 192.168.1.89
      - name: UCCE_USERNAME
        value: administrator@ucce.ipcc
      - name: UCCE_PASSWORD
        value: Expertflow464
      - name: UCCX_FQDN
        value: 192.168.1.33
      - name: UCCX_USERNAME
        value: Administrator
      - name: UCCX_PASSWORD
        value: Expertflow464
      - name: ALLOW_CISCO_SELF_SIGNED_CERTS
        value: "true"
      - name: CISCO_PROXY
        value: 'https://{{ .Values.global.ingressRouter }}/campaign-studio'
   service:
      enabled: true
      port: 1880
      portName: "http-sb-1880"
      targetPort: "http-sb-1880"
   ingress: { enabled: false } # Using APISIX
   apisixRoutes:
     - nameSuffix: "main"
       enabled: true
       priority: 0
       paths: ["/campaign-studio/*"] # From ingress path
       backendServicePort: 1880    # From ingress backend
       plugins:
         enableAuth: false          # Assumed: Requires auth
         enableRewrite: true       # Enable rewrite for custom rule
         rewriteStripPrefix: false # MUST be false to allow custom regex below
         rewriteRegexUriFrom: "^/campaign-studio(/|$)(.*)" # Specific rule from ingress rewrite-target: /red/$2
         rewriteRegexUriTo: "/red/$2"
         enableCors: true          # CORS annotations were present on specific ingress
         enableTrailingSlashRedirect: true #
   extraVolumes:
      - name: ef-logback
        configMap:
           name: ef-logback-cm
   extraVolumeMounts:
      - name: ef-logback
        mountPath: /logback
      - name: cx-campaigns-studio-flow-vol
        mountPath: /flows



##############################scheduled-activities##############################
scheduled-activities:
  enabled: true
  replicaCount: 1
  image:
    repository: campaign-manager/campaign-scheduler
    tag: 4.9.2
  efConnectionVars: true
  efEnvironmentVars: false
  containerPorts:
    - name: "http-sc-ac-8894"
      containerPort: 8894
  extraEnvVars:
    - name: TZ
      value: '{{ .Values.global.efCommonVars_TZ }}'
    - name: CHANNEL_MANAGER_BASE_URL
      value: "http://{{ .Values.global.efCxReleaseName }}-ccm-svc.{{ .Release.Namespace }}.svc:8081"
    - name: CONVERSATION_MANAGER_BASE_URL
      value: "http://{{ .Values.global.efCxReleaseName }}-conversation-manager-svc.{{ .Release.Namespace }}.svc:8080"
    - name: CACHED_OUTBOUND_MESSAGE_EXPIRY_IN_SECONDS
      value: "86400"
    - name: THIRD_PARTY_COMPONENTS_NEXT_RETRY_TIMEOUT_DURATION_IN_SECONDS
      value: "600"
    - name: THIRD_PARTY_COMPONENTS_RETRY_COUNT_ATTEMPTS_LIMIT
      value: "5"
    - name: LOG_LEVEL
      value: "INFO"
  service:
    enabled: true
    port: 8894
    portName: "http-sc-ac-8894"
    targetPort: "http-sc-ac-8894"
  ingress: { enabled: false } # Using APISIX
  apisixRoutes:
    - nameSuffix: "main"
      enabled: true
      priority: 0
      paths: ["/scheduler/*"]     # From ingress path
      backendServicePort: 8894    # From ingress backend
      plugins:
        enableAuth: false          # Assumed: Requires auth
        enableRewrite: true       # From ingress rewrite-target (implies default prefix strip)
        # rewriteStripPrefix: true # Template default when enableRewrite=true and no custom regex
        enableCors: false         # No CORS annotations on specific ingress
        enableTrailingSlashRedirect: false # No redirect needed
  extraVolumes:
    - name: redis-crt
      secret:
        secretName: redis-crt
  extraVolumeMounts:
    - name: redis-crt
      mountPath: /redis