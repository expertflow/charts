# Default values for ef-cx.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
#
# ███████ ██   ██ ██████  ███████ ██████  ████████ ███████ ██       ██████  ██     ██ 
# ██       ██ ██  ██   ██ ██      ██   ██    ██    ██      ██      ██    ██ ██     ██ 
# █████     ███   ██████  █████   ██████     ██    █████   ██      ██    ██ ██  █  ██ 
# ██       ██ ██  ██      ██      ██   ██    ██    ██      ██      ██    ██ ██ ███ ██ 
# ███████ ██   ██ ██      ███████ ██   ██    ██    ██      ███████  ██████   ███ ███  
#
# Globals Section:
#
# global.ingressRouter: Provides a central location for the FQDN that will be used \
#                       across the EF CX solution
# global.registry: when deploying solution with limited access to internet, \
#                  changing this will cause all subsequent image pulls from this registry. \
#                  Used as Variable in all sub-charts
#


global:
  ingressRouter: "devops.ef.com"
  ingressCertName: "ef-ingress-tls-secret"
  ingressClassName: "nginx"
  efCxReleaseName: "ef-cx"
  commonIngressAnnotations: {}
  ##    nginx.ingress.kubernetes.io/rewrite-target: /$2
  ##    nginx.ingress.kubernetes.io/use-regex: "true"
  imageRegistry: "gitimages.expertflow.com"
  imagePullSecrets: 
   - ef-gitlab-secret
  ## The CommonEnvVars are now part of the globals. Selective adaption to components is mandatory.
  efCommonVars_IS_WRAP_UP_ENABLED: false
  efCommonVars_WRAPUP_TIME: "60"
  efCommonVars_DEFAULT_ROOM_NAME: CC
  efCommonVars_DEFAULT_ROOM_DESCRIPTION: Contact Center Room
  efCommonVars_DEFAULT_ROOM_LABEL: CC
  efCommonVars_ROOM_IS_USER_ID: false
  efCommonVars_CONVERSATION_SEARCH_WINDOW_HRS: "24"
  efCommonVars_TZ: UTC
  efCommonVars_MASK_ATTRIBUTES_PATH: /sensitive.js
  efCommonVars_LOGGING_CONFIG: /logback/logback-spring.xml
  efCommonVars_IS_ENABLED_2FA: "false"
  efCommonVars_CHANNEL_2FA: "app"
  efCommonVars_TWILIO_SID: ""
  efCommonVars_TWILIO_VERIFY_SID: ""
  efCommonVars_TWILIO_AUTH_TOKEN: ""
  efCommonVars_TOPIC_CONCURRENCY_MIN: "2"
  efCommonVars_TOPIC_CONCURRENCY_MAX: "6"

# Change the below given paragraph when deploying an offline solution to pick the images from 
#  -- Local Repo running inside the Kubernetes Engine
#  -- Customer's own Repo requiring all images to be sorted locally 
#
# imageCredentials:
# imageCredentials.registry: provides the registry URL
# imageCredentials.username: username to use
# imageCredentials.password: Password for the user
# imageCredentials.email: an email address for the user
#
clusterDomain: cluster.local



##############################360-connector##############################
campaigns-backend:
   enabled: true
   image:       
      repository: cim/campaigns
      tag: 4.7.1
   efConnectionVars: true
   efEnvironmentVars: false
   containerPorts:
      - name: "http-cp-3000"
        containerPort: 3000
   extraEnvVars:
      - name: PORT
        value: "3000"
      - name: LOG_LEVEL
        value: debug
      - name: MONGO_CONNECTION_STRING
        value:  mongodb://mongo-mongodb.ef-external.svc.cluster.local
      - name: NODERED_URI
        value:  http://{{ .Release.Name }}-campaign-studio-svc.{{ .Release.Namespace }}.svc:1880
      - name:  NODERED_USERNAME
        value: admin
      - name: NODERED_PASS
        value: admin
      - name: UPLOAD_CSV_BATCH_SIZE
        value: "500"
      - name:  NODERED_SYNC_BATCH_SIZE
        value: "100"
      - name: CCM_URL
        value: http://{{ .Values.global.efCxReleaseName }}-ccm-svc.{{ .Release.Namespace }}.svc:8081
      - name: SCHEDULER_URL
        value: http://{{ .Release.Name }}-scheduled-activities-svc.{{ .Release.Namespace }}.svc:8894
   service:
      enabled: true
      port: 3000
      portName: "http-cp-3000"
      targetPort: "http-cp-3000"
   ingress: 
      enabled: true 
      annotations:
        nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        #cert-manager.io/cluster-issuer: "ef-letsencrypt-prod"
        nginx.ingress.kubernetes.io/rewrite-target: /$2
        nginx.ingress.kubernetes.io/use-regex: "true"
      path: /campaigns(/|$)(.*)(/|$)(.*)
      pathType: ImplementationSpecific
   extraVolumes:
      - name: mongo-mongodb-ca
        secret:
          secretName: mongo-mongodb-ca
   extraVolumeMounts:
      - name: mongo-mongodb-ca
        mountPath: /mongo



##############################360-connector##############################
campaign-studio:
   enabled: true
   image:       
      repository: cim/conversation-studio
      tag: 4.7.1
   efConnectionVars: false
   efEnvironmentVars: false
   containerPorts:
      - name: "http-sb-1880"
        containerPort: 1880
   extraEnvVars:
      - name: TZ
        value: Asia/Karachi
      - name: FQDN
        value: '{{ .Values.global.ingressRouter }}' 
      - name: CAMPAIGNS_BACKEND
        value: http://{{ .Release.Name }}-campaigns-backend-svc.{{ .Release.Namespace }}.svc:3000
      - name: SCHEDULER_URL
        value:  http://{{ .Release.Name }}-scheduled-activities-svc.{{ .Release.Namespace }}.svc:8894
      - name: URIForWebhook
        value: http://{{ .Release.Name }}-campaign-studio-svc.{{ .Release.Namespace }}.svc:1880
      - name: GATEWAY_ID
        value: 52952a5a-e7b0-40bc-aae2-f0819446c968
      - name: IVR_EXTENSION
        value: "*9664"
   service:
      enabled: true
      port: 1880
      portName: "http-sb-1880"
      targetPort: "http-sb-1880"
   ingress: 
      enabled: true 
      annotations:
        nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        #cert-manager.io/cluster-issuer: "ef-letsencrypt-prod"
        nginx.ingress.kubernetes.io/use-regex: "true"
        nginx.ingress.kubernetes.io/configuration-snippet: |
           more_set_headers "Access-Control-Allow-Origin: $http_origin";
           if ($request_uri ~* "^/campaign-studio$") {
             return 301 $scheme://$host$request_uri/;
           }
        nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
        nginx.ingress.kubernetes.io/cors-allow-methods: PUT, GET, POST, OPTIONS, DELETE,PATCH
        nginx.ingress.kubernetes.io/enable-cors: "true"
        nginx.ingress.kubernetes.io/rewrite-target: /red/$2
      path: /campaign-studio(/|$)(.*)
      pathType: ImplementationSpecific
   extraVolumes:
      - name: ef-logback
        configMap:
           name: ef-logback-cm
   extraVolumeMounts:
      - name: ef-logback
        mountPath: /logback
      - name: cx-campaigns-studio-flow-vol
        mountPath: /flows



##############################scheduled-activities##############################
scheduled-activities:
  enabled: true
  replicaCount: 1
  image:
    repository: campaign-manager/campaign-scheduler
    tag: 4.7
  efConnectionVars: true
  efEnvironmentVars: false
  containerPorts:
    - name: "http-sc-ac-8894"
      containerPort: 8894
  extraEnvVars:
    - name: TZ
      value: '{{ .Values.global.efCommonVars_TZ }}'
    - name: CHANNEL_MANAGER_BASE_URL
      value: "http://{{ .Values.global.efCxReleaseName }}-ccm-svc.{{ .Release.Namespace }}.svc:8081"
    - name: CONVERSATION_MANAGER_BASE_URL
      value: "http://{{ .Values.global.efCxReleaseName }}-conversation-manager-svc.{{ .Release.Namespace }}.svc:8080"
    - name: CACHED_OUTBOUND_MESSAGE_EXPIRY_IN_SECONDS
      value: "86400"
    - name: THIRD_PARTY_COMPONENTS_NEXT_RETRY_TIMEOUT_DURATION_IN_SECONDS
      value: "600"
    - name: THIRD_PARTY_COMPONENTS_RETRY_COUNT_ATTEMPTS_LIMIT
      value: "5"
    - name: LOG_LEVEL
      value: "INFO"
  service:
    enabled: true
    port: 8894
    portName: "http-sc-ac-8894"
    targetPort: "http-sc-ac-8894"
  ingress:
    enabled: true
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /$2
      nginx.ingress.kubernetes.io/use-regex: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      #cert-manager.io/cluster-issuer: "ef-letsencrypt-prod"
    path: /scheduler(/|$)(.*)
    pathType: ImplementationSpecific
  extraVolumes:
    - name: redis-crt
      secret:
        secretName: redis-crt
  extraVolumeMounts:
    - name: redis-crt
      mountPath: /redis